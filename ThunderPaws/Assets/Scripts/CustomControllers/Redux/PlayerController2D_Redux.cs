using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[RequireComponent(typeof(Controller2D_Redux))]
public class PlayerController2D_Redux : LifeformBase {
    /// <summary>
    /// Initialize base lifeform class: MoveSpeed, JumpHeight, TimeToJumpApex, AccelerationTimeAirborne, AccelerationTimeGrounded
    /// </summary>
	void Start () {
        InitializePhysicsValues(6f, 4f, 0.4f, 0.2f, 0.1f);
    }

    void Update() {
        //do not accumulate gravity if colliding with anythig vertical
        if (Controller.Collisions.FromBelow || Controller.Collisions.FromAbove) {
            Velocity.y = 0;
        }
        ApplyInput();
        ApplyGravity();
        Controller.Move(Velocity * Time.deltaTime);
    }

    /// <summary>
    /// Get the input from either the user - or NPC generated 
    /// </summary>
    private void ApplyInput() {
        //Aquire the input - for AI or NPC's this would be generated by code
        Vector2 input = new Vector2(Input.GetAxisRaw("Horizontal"), Input.GetAxisRaw("Vertical"));
        //check if user - or NPC - is trying to jump and is standing on the ground
        if((Input.GetKeyDown(KeyCode.Space) || Input.GetKeyDown(KeyCode.W)) && Controller.Collisions.FromBelow) {
            Velocity.y = JumpVelocity;
        }
        float targetVelocityX = input.x * MoveSpeed;
        Velocity.x = Mathf.SmoothDamp(Velocity.x, targetVelocityX, ref VelocityXSmoothing, Controller.Collisions.FromBelow ? AccelerationTimeGrounded : AccelerationTimeAirborne);
    }

}
